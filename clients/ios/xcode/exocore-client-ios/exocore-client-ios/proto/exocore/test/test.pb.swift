// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: exocore/test/test.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Exocore_Test_TestMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var string1: String {
    get {return _storage._string1}
    set {_uniqueStorage()._string1 = newValue}
  }

  var string2: String {
    get {return _storage._string2}
    set {_uniqueStorage()._string2 = newValue}
  }

  var struct1: Exocore_Test_TestStruct {
    get {return _storage._struct1 ?? Exocore_Test_TestStruct()}
    set {_uniqueStorage()._struct1 = newValue}
  }
  /// Returns true if `struct1` has been explicitly set.
  var hasStruct1: Bool {return _storage._struct1 != nil}
  /// Clears the value of `struct1`. Subsequent reads from it will return its default value.
  mutating func clearStruct1() {_uniqueStorage()._struct1 = nil}

  var fields: OneOf_Fields? {
    get {return _storage._fields}
    set {_uniqueStorage()._fields = newValue}
  }

  var oneofString1: String {
    get {
      if case .oneofString1(let v)? = _storage._fields {return v}
      return String()
    }
    set {_uniqueStorage()._fields = .oneofString1(newValue)}
  }

  var oneofInt1: UInt32 {
    get {
      if case .oneofInt1(let v)? = _storage._fields {return v}
      return 0
    }
    set {_uniqueStorage()._fields = .oneofInt1(newValue)}
  }

  var date1: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._date1 ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._date1 = newValue}
  }
  /// Returns true if `date1` has been explicitly set.
  var hasDate1: Bool {return _storage._date1 != nil}
  /// Clears the value of `date1`. Subsequent reads from it will return its default value.
  mutating func clearDate1() {_uniqueStorage()._date1 = nil}

  var date2: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._date2 ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._date2 = newValue}
  }
  /// Returns true if `date2` has been explicitly set.
  var hasDate2: Bool {return _storage._date2 != nil}
  /// Clears the value of `date2`. Subsequent reads from it will return its default value.
  mutating func clearDate2() {_uniqueStorage()._date2 = nil}

  var int1: UInt32 {
    get {return _storage._int1}
    set {_uniqueStorage()._int1 = newValue}
  }

  var int2: UInt32 {
    get {return _storage._int2}
    set {_uniqueStorage()._int2 = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Fields: Equatable {
    case oneofString1(String)
    case oneofInt1(UInt32)

  #if !swift(>=4.1)
    static func ==(lhs: Exocore_Test_TestMessage.OneOf_Fields, rhs: Exocore_Test_TestMessage.OneOf_Fields) -> Bool {
      switch (lhs, rhs) {
      case (.oneofString1(let l), .oneofString1(let r)): return l == r
      case (.oneofInt1(let l), .oneofInt1(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Exocore_Test_TestStruct {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var string1: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Exocore_Test_TestMessage2 {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var string1: String = String()

  var string2: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "exocore.test"

extension Exocore_Test_TestMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TestMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "string1"),
    2: .same(proto: "string2"),
    3: .same(proto: "struct1"),
    4: .standard(proto: "oneof_string1"),
    5: .standard(proto: "oneof_int1"),
    8: .same(proto: "date1"),
    9: .same(proto: "date2"),
    10: .same(proto: "int1"),
    11: .same(proto: "int2"),
  ]

  fileprivate class _StorageClass {
    var _string1: String = String()
    var _string2: String = String()
    var _struct1: Exocore_Test_TestStruct? = nil
    var _fields: Exocore_Test_TestMessage.OneOf_Fields?
    var _date1: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _date2: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _int1: UInt32 = 0
    var _int2: UInt32 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _string1 = source._string1
      _string2 = source._string2
      _struct1 = source._struct1
      _fields = source._fields
      _date1 = source._date1
      _date2 = source._date2
      _int1 = source._int1
      _int2 = source._int2
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._string1)
        case 2: try decoder.decodeSingularStringField(value: &_storage._string2)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._struct1)
        case 4:
          if _storage._fields != nil {try decoder.handleConflictingOneOf()}
          var v: String?
          try decoder.decodeSingularStringField(value: &v)
          if let v = v {_storage._fields = .oneofString1(v)}
        case 5:
          if _storage._fields != nil {try decoder.handleConflictingOneOf()}
          var v: UInt32?
          try decoder.decodeSingularUInt32Field(value: &v)
          if let v = v {_storage._fields = .oneofInt1(v)}
        case 8: try decoder.decodeSingularMessageField(value: &_storage._date1)
        case 9: try decoder.decodeSingularMessageField(value: &_storage._date2)
        case 10: try decoder.decodeSingularUInt32Field(value: &_storage._int1)
        case 11: try decoder.decodeSingularUInt32Field(value: &_storage._int2)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._string1.isEmpty {
        try visitor.visitSingularStringField(value: _storage._string1, fieldNumber: 1)
      }
      if !_storage._string2.isEmpty {
        try visitor.visitSingularStringField(value: _storage._string2, fieldNumber: 2)
      }
      if let v = _storage._struct1 {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      switch _storage._fields {
      case .oneofString1(let v)?:
        try visitor.visitSingularStringField(value: v, fieldNumber: 4)
      case .oneofInt1(let v)?:
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 5)
      case nil: break
      }
      if let v = _storage._date1 {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if let v = _storage._date2 {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
      if _storage._int1 != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._int1, fieldNumber: 10)
      }
      if _storage._int2 != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._int2, fieldNumber: 11)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Exocore_Test_TestMessage, rhs: Exocore_Test_TestMessage) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._string1 != rhs_storage._string1 {return false}
        if _storage._string2 != rhs_storage._string2 {return false}
        if _storage._struct1 != rhs_storage._struct1 {return false}
        if _storage._fields != rhs_storage._fields {return false}
        if _storage._date1 != rhs_storage._date1 {return false}
        if _storage._date2 != rhs_storage._date2 {return false}
        if _storage._int1 != rhs_storage._int1 {return false}
        if _storage._int2 != rhs_storage._int2 {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Exocore_Test_TestStruct: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TestStruct"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "string1"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.string1)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.string1.isEmpty {
      try visitor.visitSingularStringField(value: self.string1, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Exocore_Test_TestStruct, rhs: Exocore_Test_TestStruct) -> Bool {
    if lhs.string1 != rhs.string1 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Exocore_Test_TestMessage2: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TestMessage2"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "string1"),
    2: .same(proto: "string2"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.string1)
      case 2: try decoder.decodeSingularStringField(value: &self.string2)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.string1.isEmpty {
      try visitor.visitSingularStringField(value: self.string1, fieldNumber: 1)
    }
    if !self.string2.isEmpty {
      try visitor.visitSingularStringField(value: self.string2, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Exocore_Test_TestMessage2, rhs: Exocore_Test_TestMessage2) -> Bool {
    if lhs.string1 != rhs.string1 {return false}
    if lhs.string2 != rhs.string2 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
