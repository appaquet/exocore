// source: exocore/test/test.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var exocore_index_options_pb = require('../../exocore/index/options_pb.js');
goog.object.extend(proto, exocore_index_options_pb);
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
goog.exportSymbol('proto.exocore.test.TestMessage', null, global);
goog.exportSymbol('proto.exocore.test.TestMessage.FieldsCase', null, global);
goog.exportSymbol('proto.exocore.test.TestMessage2', null, global);
goog.exportSymbol('proto.exocore.test.TestStruct', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.exocore.test.TestMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.exocore.test.TestMessage.oneofGroups_);
};
goog.inherits(proto.exocore.test.TestMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.exocore.test.TestMessage.displayName = 'proto.exocore.test.TestMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.exocore.test.TestStruct = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.exocore.test.TestStruct, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.exocore.test.TestStruct.displayName = 'proto.exocore.test.TestStruct';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.exocore.test.TestMessage2 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.exocore.test.TestMessage2, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.exocore.test.TestMessage2.displayName = 'proto.exocore.test.TestMessage2';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.exocore.test.TestMessage.oneofGroups_ = [[4,5]];

/**
 * @enum {number}
 */
proto.exocore.test.TestMessage.FieldsCase = {
  FIELDS_NOT_SET: 0,
  ONEOF_STRING1: 4,
  ONEOF_INT1: 5
};

/**
 * @return {proto.exocore.test.TestMessage.FieldsCase}
 */
proto.exocore.test.TestMessage.prototype.getFieldsCase = function() {
  return /** @type {proto.exocore.test.TestMessage.FieldsCase} */(jspb.Message.computeOneofCase(this, proto.exocore.test.TestMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.exocore.test.TestMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.exocore.test.TestMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.exocore.test.TestMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.exocore.test.TestMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    string1: jspb.Message.getFieldWithDefault(msg, 1, ""),
    string2: jspb.Message.getFieldWithDefault(msg, 2, ""),
    struct1: (f = msg.getStruct1()) && proto.exocore.test.TestStruct.toObject(includeInstance, f),
    oneofString1: jspb.Message.getFieldWithDefault(msg, 4, ""),
    oneofInt1: jspb.Message.getFieldWithDefault(msg, 5, 0),
    date1: (f = msg.getDate1()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    date2: (f = msg.getDate2()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    int1: jspb.Message.getFieldWithDefault(msg, 10, 0),
    int2: jspb.Message.getFieldWithDefault(msg, 11, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.exocore.test.TestMessage}
 */
proto.exocore.test.TestMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.exocore.test.TestMessage;
  return proto.exocore.test.TestMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.exocore.test.TestMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.exocore.test.TestMessage}
 */
proto.exocore.test.TestMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setString1(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setString2(value);
      break;
    case 3:
      var value = new proto.exocore.test.TestStruct;
      reader.readMessage(value,proto.exocore.test.TestStruct.deserializeBinaryFromReader);
      msg.setStruct1(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setOneofString1(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOneofInt1(value);
      break;
    case 8:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setDate1(value);
      break;
    case 9:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setDate2(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setInt1(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setInt2(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.exocore.test.TestMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.exocore.test.TestMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.exocore.test.TestMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.exocore.test.TestMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getString1();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getString2();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getStruct1();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.exocore.test.TestStruct.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getDate1();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getDate2();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getInt1();
  if (f !== 0) {
    writer.writeUint32(
      10,
      f
    );
  }
  f = message.getInt2();
  if (f !== 0) {
    writer.writeUint32(
      11,
      f
    );
  }
};


/**
 * optional string string1 = 1;
 * @return {string}
 */
proto.exocore.test.TestMessage.prototype.getString1 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.exocore.test.TestMessage} returns this
 */
proto.exocore.test.TestMessage.prototype.setString1 = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string string2 = 2;
 * @return {string}
 */
proto.exocore.test.TestMessage.prototype.getString2 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.exocore.test.TestMessage} returns this
 */
proto.exocore.test.TestMessage.prototype.setString2 = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional TestStruct struct1 = 3;
 * @return {?proto.exocore.test.TestStruct}
 */
proto.exocore.test.TestMessage.prototype.getStruct1 = function() {
  return /** @type{?proto.exocore.test.TestStruct} */ (
    jspb.Message.getWrapperField(this, proto.exocore.test.TestStruct, 3));
};


/**
 * @param {?proto.exocore.test.TestStruct|undefined} value
 * @return {!proto.exocore.test.TestMessage} returns this
*/
proto.exocore.test.TestMessage.prototype.setStruct1 = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.exocore.test.TestMessage} returns this
 */
proto.exocore.test.TestMessage.prototype.clearStruct1 = function() {
  return this.setStruct1(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.exocore.test.TestMessage.prototype.hasStruct1 = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string oneof_string1 = 4;
 * @return {string}
 */
proto.exocore.test.TestMessage.prototype.getOneofString1 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.exocore.test.TestMessage} returns this
 */
proto.exocore.test.TestMessage.prototype.setOneofString1 = function(value) {
  return jspb.Message.setOneofField(this, 4, proto.exocore.test.TestMessage.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.exocore.test.TestMessage} returns this
 */
proto.exocore.test.TestMessage.prototype.clearOneofString1 = function() {
  return jspb.Message.setOneofField(this, 4, proto.exocore.test.TestMessage.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.exocore.test.TestMessage.prototype.hasOneofString1 = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint32 oneof_int1 = 5;
 * @return {number}
 */
proto.exocore.test.TestMessage.prototype.getOneofInt1 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.exocore.test.TestMessage} returns this
 */
proto.exocore.test.TestMessage.prototype.setOneofInt1 = function(value) {
  return jspb.Message.setOneofField(this, 5, proto.exocore.test.TestMessage.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.exocore.test.TestMessage} returns this
 */
proto.exocore.test.TestMessage.prototype.clearOneofInt1 = function() {
  return jspb.Message.setOneofField(this, 5, proto.exocore.test.TestMessage.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.exocore.test.TestMessage.prototype.hasOneofInt1 = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional google.protobuf.Timestamp date1 = 8;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.exocore.test.TestMessage.prototype.getDate1 = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 8));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.exocore.test.TestMessage} returns this
*/
proto.exocore.test.TestMessage.prototype.setDate1 = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.exocore.test.TestMessage} returns this
 */
proto.exocore.test.TestMessage.prototype.clearDate1 = function() {
  return this.setDate1(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.exocore.test.TestMessage.prototype.hasDate1 = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional google.protobuf.Timestamp date2 = 9;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.exocore.test.TestMessage.prototype.getDate2 = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 9));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.exocore.test.TestMessage} returns this
*/
proto.exocore.test.TestMessage.prototype.setDate2 = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.exocore.test.TestMessage} returns this
 */
proto.exocore.test.TestMessage.prototype.clearDate2 = function() {
  return this.setDate2(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.exocore.test.TestMessage.prototype.hasDate2 = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional uint32 int1 = 10;
 * @return {number}
 */
proto.exocore.test.TestMessage.prototype.getInt1 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.exocore.test.TestMessage} returns this
 */
proto.exocore.test.TestMessage.prototype.setInt1 = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional uint32 int2 = 11;
 * @return {number}
 */
proto.exocore.test.TestMessage.prototype.getInt2 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.exocore.test.TestMessage} returns this
 */
proto.exocore.test.TestMessage.prototype.setInt2 = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.exocore.test.TestStruct.prototype.toObject = function(opt_includeInstance) {
  return proto.exocore.test.TestStruct.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.exocore.test.TestStruct} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.exocore.test.TestStruct.toObject = function(includeInstance, msg) {
  var f, obj = {
    string1: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.exocore.test.TestStruct}
 */
proto.exocore.test.TestStruct.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.exocore.test.TestStruct;
  return proto.exocore.test.TestStruct.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.exocore.test.TestStruct} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.exocore.test.TestStruct}
 */
proto.exocore.test.TestStruct.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setString1(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.exocore.test.TestStruct.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.exocore.test.TestStruct.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.exocore.test.TestStruct} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.exocore.test.TestStruct.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getString1();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string string1 = 1;
 * @return {string}
 */
proto.exocore.test.TestStruct.prototype.getString1 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.exocore.test.TestStruct} returns this
 */
proto.exocore.test.TestStruct.prototype.setString1 = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.exocore.test.TestMessage2.prototype.toObject = function(opt_includeInstance) {
  return proto.exocore.test.TestMessage2.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.exocore.test.TestMessage2} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.exocore.test.TestMessage2.toObject = function(includeInstance, msg) {
  var f, obj = {
    string1: jspb.Message.getFieldWithDefault(msg, 1, ""),
    string2: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.exocore.test.TestMessage2}
 */
proto.exocore.test.TestMessage2.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.exocore.test.TestMessage2;
  return proto.exocore.test.TestMessage2.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.exocore.test.TestMessage2} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.exocore.test.TestMessage2}
 */
proto.exocore.test.TestMessage2.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setString1(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setString2(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.exocore.test.TestMessage2.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.exocore.test.TestMessage2.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.exocore.test.TestMessage2} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.exocore.test.TestMessage2.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getString1();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getString2();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string string1 = 1;
 * @return {string}
 */
proto.exocore.test.TestMessage2.prototype.getString1 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.exocore.test.TestMessage2} returns this
 */
proto.exocore.test.TestMessage2.prototype.setString1 = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string string2 = 2;
 * @return {string}
 */
proto.exocore.test.TestMessage2.prototype.getString2 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.exocore.test.TestMessage2} returns this
 */
proto.exocore.test.TestMessage2.prototype.setString2 = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


goog.object.extend(exports, proto.exocore.test);
