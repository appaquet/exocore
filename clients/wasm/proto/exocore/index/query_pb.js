// source: exocore/index/query.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var exocore_index_entity_pb = require('../../exocore/index/entity_pb.js');
goog.object.extend(proto, exocore_index_entity_pb);
goog.exportSymbol('proto.exocore.index.EntityQuery', null, global);
goog.exportSymbol('proto.exocore.index.EntityQuery.PredicateCase', null, global);
goog.exportSymbol('proto.exocore.index.EntityResult', null, global);
goog.exportSymbol('proto.exocore.index.EntityResultSource', null, global);
goog.exportSymbol('proto.exocore.index.EntityResults', null, global);
goog.exportSymbol('proto.exocore.index.IdPredicate', null, global);
goog.exportSymbol('proto.exocore.index.MatchPredicate', null, global);
goog.exportSymbol('proto.exocore.index.Paging', null, global);
goog.exportSymbol('proto.exocore.index.TestPredicate', null, global);
goog.exportSymbol('proto.exocore.index.TraitPredicate', null, global);
goog.exportSymbol('proto.exocore.index.TraitQuery', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.exocore.index.EntityQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.exocore.index.EntityQuery.oneofGroups_);
};
goog.inherits(proto.exocore.index.EntityQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.exocore.index.EntityQuery.displayName = 'proto.exocore.index.EntityQuery';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.exocore.index.MatchPredicate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.exocore.index.MatchPredicate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.exocore.index.MatchPredicate.displayName = 'proto.exocore.index.MatchPredicate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.exocore.index.IdPredicate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.exocore.index.IdPredicate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.exocore.index.IdPredicate.displayName = 'proto.exocore.index.IdPredicate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.exocore.index.TestPredicate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.exocore.index.TestPredicate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.exocore.index.TestPredicate.displayName = 'proto.exocore.index.TestPredicate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.exocore.index.TraitPredicate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.exocore.index.TraitPredicate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.exocore.index.TraitPredicate.displayName = 'proto.exocore.index.TraitPredicate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.exocore.index.TraitQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.exocore.index.TraitQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.exocore.index.TraitQuery.displayName = 'proto.exocore.index.TraitQuery';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.exocore.index.Paging = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.exocore.index.Paging, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.exocore.index.Paging.displayName = 'proto.exocore.index.Paging';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.exocore.index.EntityResults = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.exocore.index.EntityResults.repeatedFields_, null);
};
goog.inherits(proto.exocore.index.EntityResults, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.exocore.index.EntityResults.displayName = 'proto.exocore.index.EntityResults';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.exocore.index.EntityResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.exocore.index.EntityResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.exocore.index.EntityResult.displayName = 'proto.exocore.index.EntityResult';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.exocore.index.EntityQuery.oneofGroups_ = [[1,2,3,99]];

/**
 * @enum {number}
 */
proto.exocore.index.EntityQuery.PredicateCase = {
  PREDICATE_NOT_SET: 0,
  MATCH: 1,
  TRAIT: 2,
  ID: 3,
  TEST: 99
};

/**
 * @return {proto.exocore.index.EntityQuery.PredicateCase}
 */
proto.exocore.index.EntityQuery.prototype.getPredicateCase = function() {
  return /** @type {proto.exocore.index.EntityQuery.PredicateCase} */(jspb.Message.computeOneofCase(this, proto.exocore.index.EntityQuery.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.exocore.index.EntityQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.exocore.index.EntityQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.exocore.index.EntityQuery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.exocore.index.EntityQuery.toObject = function(includeInstance, msg) {
  var f, obj = {
    match: (f = msg.getMatch()) && proto.exocore.index.MatchPredicate.toObject(includeInstance, f),
    trait: (f = msg.getTrait()) && proto.exocore.index.TraitPredicate.toObject(includeInstance, f),
    id: (f = msg.getId()) && proto.exocore.index.IdPredicate.toObject(includeInstance, f),
    test: (f = msg.getTest()) && proto.exocore.index.TestPredicate.toObject(includeInstance, f),
    paging: (f = msg.getPaging()) && proto.exocore.index.Paging.toObject(includeInstance, f),
    summary: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    watchToken: jspb.Message.getFieldWithDefault(msg, 7, 0),
    resultHash: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.exocore.index.EntityQuery}
 */
proto.exocore.index.EntityQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.exocore.index.EntityQuery;
  return proto.exocore.index.EntityQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.exocore.index.EntityQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.exocore.index.EntityQuery}
 */
proto.exocore.index.EntityQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.exocore.index.MatchPredicate;
      reader.readMessage(value,proto.exocore.index.MatchPredicate.deserializeBinaryFromReader);
      msg.setMatch(value);
      break;
    case 2:
      var value = new proto.exocore.index.TraitPredicate;
      reader.readMessage(value,proto.exocore.index.TraitPredicate.deserializeBinaryFromReader);
      msg.setTrait(value);
      break;
    case 3:
      var value = new proto.exocore.index.IdPredicate;
      reader.readMessage(value,proto.exocore.index.IdPredicate.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 99:
      var value = new proto.exocore.index.TestPredicate;
      reader.readMessage(value,proto.exocore.index.TestPredicate.deserializeBinaryFromReader);
      msg.setTest(value);
      break;
    case 5:
      var value = new proto.exocore.index.Paging;
      reader.readMessage(value,proto.exocore.index.Paging.deserializeBinaryFromReader);
      msg.setPaging(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSummary(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setWatchToken(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setResultHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.exocore.index.EntityQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.exocore.index.EntityQuery.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.exocore.index.EntityQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.exocore.index.EntityQuery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMatch();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.exocore.index.MatchPredicate.serializeBinaryToWriter
    );
  }
  f = message.getTrait();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.exocore.index.TraitPredicate.serializeBinaryToWriter
    );
  }
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.exocore.index.IdPredicate.serializeBinaryToWriter
    );
  }
  f = message.getTest();
  if (f != null) {
    writer.writeMessage(
      99,
      f,
      proto.exocore.index.TestPredicate.serializeBinaryToWriter
    );
  }
  f = message.getPaging();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.exocore.index.Paging.serializeBinaryToWriter
    );
  }
  f = message.getSummary();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getWatchToken();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getResultHash();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
};


/**
 * optional MatchPredicate match = 1;
 * @return {?proto.exocore.index.MatchPredicate}
 */
proto.exocore.index.EntityQuery.prototype.getMatch = function() {
  return /** @type{?proto.exocore.index.MatchPredicate} */ (
    jspb.Message.getWrapperField(this, proto.exocore.index.MatchPredicate, 1));
};


/**
 * @param {?proto.exocore.index.MatchPredicate|undefined} value
 * @return {!proto.exocore.index.EntityQuery} returns this
*/
proto.exocore.index.EntityQuery.prototype.setMatch = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.exocore.index.EntityQuery.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.exocore.index.EntityQuery} returns this
 */
proto.exocore.index.EntityQuery.prototype.clearMatch = function() {
  return this.setMatch(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.exocore.index.EntityQuery.prototype.hasMatch = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TraitPredicate trait = 2;
 * @return {?proto.exocore.index.TraitPredicate}
 */
proto.exocore.index.EntityQuery.prototype.getTrait = function() {
  return /** @type{?proto.exocore.index.TraitPredicate} */ (
    jspb.Message.getWrapperField(this, proto.exocore.index.TraitPredicate, 2));
};


/**
 * @param {?proto.exocore.index.TraitPredicate|undefined} value
 * @return {!proto.exocore.index.EntityQuery} returns this
*/
proto.exocore.index.EntityQuery.prototype.setTrait = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.exocore.index.EntityQuery.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.exocore.index.EntityQuery} returns this
 */
proto.exocore.index.EntityQuery.prototype.clearTrait = function() {
  return this.setTrait(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.exocore.index.EntityQuery.prototype.hasTrait = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional IdPredicate id = 3;
 * @return {?proto.exocore.index.IdPredicate}
 */
proto.exocore.index.EntityQuery.prototype.getId = function() {
  return /** @type{?proto.exocore.index.IdPredicate} */ (
    jspb.Message.getWrapperField(this, proto.exocore.index.IdPredicate, 3));
};


/**
 * @param {?proto.exocore.index.IdPredicate|undefined} value
 * @return {!proto.exocore.index.EntityQuery} returns this
*/
proto.exocore.index.EntityQuery.prototype.setId = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.exocore.index.EntityQuery.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.exocore.index.EntityQuery} returns this
 */
proto.exocore.index.EntityQuery.prototype.clearId = function() {
  return this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.exocore.index.EntityQuery.prototype.hasId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional TestPredicate test = 99;
 * @return {?proto.exocore.index.TestPredicate}
 */
proto.exocore.index.EntityQuery.prototype.getTest = function() {
  return /** @type{?proto.exocore.index.TestPredicate} */ (
    jspb.Message.getWrapperField(this, proto.exocore.index.TestPredicate, 99));
};


/**
 * @param {?proto.exocore.index.TestPredicate|undefined} value
 * @return {!proto.exocore.index.EntityQuery} returns this
*/
proto.exocore.index.EntityQuery.prototype.setTest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 99, proto.exocore.index.EntityQuery.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.exocore.index.EntityQuery} returns this
 */
proto.exocore.index.EntityQuery.prototype.clearTest = function() {
  return this.setTest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.exocore.index.EntityQuery.prototype.hasTest = function() {
  return jspb.Message.getField(this, 99) != null;
};


/**
 * optional Paging paging = 5;
 * @return {?proto.exocore.index.Paging}
 */
proto.exocore.index.EntityQuery.prototype.getPaging = function() {
  return /** @type{?proto.exocore.index.Paging} */ (
    jspb.Message.getWrapperField(this, proto.exocore.index.Paging, 5));
};


/**
 * @param {?proto.exocore.index.Paging|undefined} value
 * @return {!proto.exocore.index.EntityQuery} returns this
*/
proto.exocore.index.EntityQuery.prototype.setPaging = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.exocore.index.EntityQuery} returns this
 */
proto.exocore.index.EntityQuery.prototype.clearPaging = function() {
  return this.setPaging(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.exocore.index.EntityQuery.prototype.hasPaging = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bool summary = 6;
 * @return {boolean}
 */
proto.exocore.index.EntityQuery.prototype.getSummary = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.exocore.index.EntityQuery} returns this
 */
proto.exocore.index.EntityQuery.prototype.setSummary = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional uint64 watch_token = 7;
 * @return {number}
 */
proto.exocore.index.EntityQuery.prototype.getWatchToken = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.exocore.index.EntityQuery} returns this
 */
proto.exocore.index.EntityQuery.prototype.setWatchToken = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint64 result_hash = 8;
 * @return {number}
 */
proto.exocore.index.EntityQuery.prototype.getResultHash = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.exocore.index.EntityQuery} returns this
 */
proto.exocore.index.EntityQuery.prototype.setResultHash = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.exocore.index.MatchPredicate.prototype.toObject = function(opt_includeInstance) {
  return proto.exocore.index.MatchPredicate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.exocore.index.MatchPredicate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.exocore.index.MatchPredicate.toObject = function(includeInstance, msg) {
  var f, obj = {
    query: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.exocore.index.MatchPredicate}
 */
proto.exocore.index.MatchPredicate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.exocore.index.MatchPredicate;
  return proto.exocore.index.MatchPredicate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.exocore.index.MatchPredicate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.exocore.index.MatchPredicate}
 */
proto.exocore.index.MatchPredicate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuery(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.exocore.index.MatchPredicate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.exocore.index.MatchPredicate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.exocore.index.MatchPredicate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.exocore.index.MatchPredicate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuery();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string query = 1;
 * @return {string}
 */
proto.exocore.index.MatchPredicate.prototype.getQuery = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.exocore.index.MatchPredicate} returns this
 */
proto.exocore.index.MatchPredicate.prototype.setQuery = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.exocore.index.IdPredicate.prototype.toObject = function(opt_includeInstance) {
  return proto.exocore.index.IdPredicate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.exocore.index.IdPredicate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.exocore.index.IdPredicate.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.exocore.index.IdPredicate}
 */
proto.exocore.index.IdPredicate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.exocore.index.IdPredicate;
  return proto.exocore.index.IdPredicate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.exocore.index.IdPredicate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.exocore.index.IdPredicate}
 */
proto.exocore.index.IdPredicate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.exocore.index.IdPredicate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.exocore.index.IdPredicate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.exocore.index.IdPredicate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.exocore.index.IdPredicate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.exocore.index.IdPredicate.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.exocore.index.IdPredicate} returns this
 */
proto.exocore.index.IdPredicate.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.exocore.index.TestPredicate.prototype.toObject = function(opt_includeInstance) {
  return proto.exocore.index.TestPredicate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.exocore.index.TestPredicate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.exocore.index.TestPredicate.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.exocore.index.TestPredicate}
 */
proto.exocore.index.TestPredicate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.exocore.index.TestPredicate;
  return proto.exocore.index.TestPredicate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.exocore.index.TestPredicate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.exocore.index.TestPredicate}
 */
proto.exocore.index.TestPredicate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.exocore.index.TestPredicate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.exocore.index.TestPredicate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.exocore.index.TestPredicate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.exocore.index.TestPredicate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.exocore.index.TestPredicate.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.exocore.index.TestPredicate} returns this
 */
proto.exocore.index.TestPredicate.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.exocore.index.TraitPredicate.prototype.toObject = function(opt_includeInstance) {
  return proto.exocore.index.TraitPredicate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.exocore.index.TraitPredicate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.exocore.index.TraitPredicate.toObject = function(includeInstance, msg) {
  var f, obj = {
    traitName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    query: (f = msg.getQuery()) && proto.exocore.index.TraitQuery.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.exocore.index.TraitPredicate}
 */
proto.exocore.index.TraitPredicate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.exocore.index.TraitPredicate;
  return proto.exocore.index.TraitPredicate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.exocore.index.TraitPredicate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.exocore.index.TraitPredicate}
 */
proto.exocore.index.TraitPredicate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTraitName(value);
      break;
    case 2:
      var value = new proto.exocore.index.TraitQuery;
      reader.readMessage(value,proto.exocore.index.TraitQuery.deserializeBinaryFromReader);
      msg.setQuery(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.exocore.index.TraitPredicate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.exocore.index.TraitPredicate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.exocore.index.TraitPredicate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.exocore.index.TraitPredicate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTraitName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getQuery();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.exocore.index.TraitQuery.serializeBinaryToWriter
    );
  }
};


/**
 * optional string trait_name = 1;
 * @return {string}
 */
proto.exocore.index.TraitPredicate.prototype.getTraitName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.exocore.index.TraitPredicate} returns this
 */
proto.exocore.index.TraitPredicate.prototype.setTraitName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional TraitQuery query = 2;
 * @return {?proto.exocore.index.TraitQuery}
 */
proto.exocore.index.TraitPredicate.prototype.getQuery = function() {
  return /** @type{?proto.exocore.index.TraitQuery} */ (
    jspb.Message.getWrapperField(this, proto.exocore.index.TraitQuery, 2));
};


/**
 * @param {?proto.exocore.index.TraitQuery|undefined} value
 * @return {!proto.exocore.index.TraitPredicate} returns this
*/
proto.exocore.index.TraitPredicate.prototype.setQuery = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.exocore.index.TraitPredicate} returns this
 */
proto.exocore.index.TraitPredicate.prototype.clearQuery = function() {
  return this.setQuery(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.exocore.index.TraitPredicate.prototype.hasQuery = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.exocore.index.TraitQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.exocore.index.TraitQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.exocore.index.TraitQuery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.exocore.index.TraitQuery.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.exocore.index.TraitQuery}
 */
proto.exocore.index.TraitQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.exocore.index.TraitQuery;
  return proto.exocore.index.TraitQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.exocore.index.TraitQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.exocore.index.TraitQuery}
 */
proto.exocore.index.TraitQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.exocore.index.TraitQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.exocore.index.TraitQuery.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.exocore.index.TraitQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.exocore.index.TraitQuery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.exocore.index.Paging.prototype.toObject = function(opt_includeInstance) {
  return proto.exocore.index.Paging.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.exocore.index.Paging} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.exocore.index.Paging.toObject = function(includeInstance, msg) {
  var f, obj = {
    afterToken: jspb.Message.getFieldWithDefault(msg, 1, ""),
    beforeToken: jspb.Message.getFieldWithDefault(msg, 2, ""),
    count: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.exocore.index.Paging}
 */
proto.exocore.index.Paging.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.exocore.index.Paging;
  return proto.exocore.index.Paging.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.exocore.index.Paging} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.exocore.index.Paging}
 */
proto.exocore.index.Paging.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAfterToken(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBeforeToken(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.exocore.index.Paging.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.exocore.index.Paging.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.exocore.index.Paging} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.exocore.index.Paging.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAfterToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBeforeToken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCount();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional string after_token = 1;
 * @return {string}
 */
proto.exocore.index.Paging.prototype.getAfterToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.exocore.index.Paging} returns this
 */
proto.exocore.index.Paging.prototype.setAfterToken = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string before_token = 2;
 * @return {string}
 */
proto.exocore.index.Paging.prototype.getBeforeToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.exocore.index.Paging} returns this
 */
proto.exocore.index.Paging.prototype.setBeforeToken = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint32 count = 3;
 * @return {number}
 */
proto.exocore.index.Paging.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.exocore.index.Paging} returns this
 */
proto.exocore.index.Paging.prototype.setCount = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.exocore.index.EntityResults.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.exocore.index.EntityResults.prototype.toObject = function(opt_includeInstance) {
  return proto.exocore.index.EntityResults.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.exocore.index.EntityResults} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.exocore.index.EntityResults.toObject = function(includeInstance, msg) {
  var f, obj = {
    entitiesList: jspb.Message.toObjectList(msg.getEntitiesList(),
    proto.exocore.index.EntityResult.toObject, includeInstance),
    summary: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    estimatedCount: jspb.Message.getFieldWithDefault(msg, 3, 0),
    currentPage: (f = msg.getCurrentPage()) && proto.exocore.index.Paging.toObject(includeInstance, f),
    nextPage: (f = msg.getNextPage()) && proto.exocore.index.Paging.toObject(includeInstance, f),
    hash: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.exocore.index.EntityResults}
 */
proto.exocore.index.EntityResults.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.exocore.index.EntityResults;
  return proto.exocore.index.EntityResults.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.exocore.index.EntityResults} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.exocore.index.EntityResults}
 */
proto.exocore.index.EntityResults.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.exocore.index.EntityResult;
      reader.readMessage(value,proto.exocore.index.EntityResult.deserializeBinaryFromReader);
      msg.addEntities(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSummary(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setEstimatedCount(value);
      break;
    case 4:
      var value = new proto.exocore.index.Paging;
      reader.readMessage(value,proto.exocore.index.Paging.deserializeBinaryFromReader);
      msg.setCurrentPage(value);
      break;
    case 5:
      var value = new proto.exocore.index.Paging;
      reader.readMessage(value,proto.exocore.index.Paging.deserializeBinaryFromReader);
      msg.setNextPage(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.exocore.index.EntityResults.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.exocore.index.EntityResults.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.exocore.index.EntityResults} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.exocore.index.EntityResults.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEntitiesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.exocore.index.EntityResult.serializeBinaryToWriter
    );
  }
  f = message.getSummary();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getEstimatedCount();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getCurrentPage();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.exocore.index.Paging.serializeBinaryToWriter
    );
  }
  f = message.getNextPage();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.exocore.index.Paging.serializeBinaryToWriter
    );
  }
  f = message.getHash();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
};


/**
 * repeated EntityResult entities = 1;
 * @return {!Array<!proto.exocore.index.EntityResult>}
 */
proto.exocore.index.EntityResults.prototype.getEntitiesList = function() {
  return /** @type{!Array<!proto.exocore.index.EntityResult>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.exocore.index.EntityResult, 1));
};


/**
 * @param {!Array<!proto.exocore.index.EntityResult>} value
 * @return {!proto.exocore.index.EntityResults} returns this
*/
proto.exocore.index.EntityResults.prototype.setEntitiesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.exocore.index.EntityResult=} opt_value
 * @param {number=} opt_index
 * @return {!proto.exocore.index.EntityResult}
 */
proto.exocore.index.EntityResults.prototype.addEntities = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.exocore.index.EntityResult, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.exocore.index.EntityResults} returns this
 */
proto.exocore.index.EntityResults.prototype.clearEntitiesList = function() {
  return this.setEntitiesList([]);
};


/**
 * optional bool summary = 2;
 * @return {boolean}
 */
proto.exocore.index.EntityResults.prototype.getSummary = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.exocore.index.EntityResults} returns this
 */
proto.exocore.index.EntityResults.prototype.setSummary = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional uint32 estimated_count = 3;
 * @return {number}
 */
proto.exocore.index.EntityResults.prototype.getEstimatedCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.exocore.index.EntityResults} returns this
 */
proto.exocore.index.EntityResults.prototype.setEstimatedCount = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional Paging current_page = 4;
 * @return {?proto.exocore.index.Paging}
 */
proto.exocore.index.EntityResults.prototype.getCurrentPage = function() {
  return /** @type{?proto.exocore.index.Paging} */ (
    jspb.Message.getWrapperField(this, proto.exocore.index.Paging, 4));
};


/**
 * @param {?proto.exocore.index.Paging|undefined} value
 * @return {!proto.exocore.index.EntityResults} returns this
*/
proto.exocore.index.EntityResults.prototype.setCurrentPage = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.exocore.index.EntityResults} returns this
 */
proto.exocore.index.EntityResults.prototype.clearCurrentPage = function() {
  return this.setCurrentPage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.exocore.index.EntityResults.prototype.hasCurrentPage = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Paging next_page = 5;
 * @return {?proto.exocore.index.Paging}
 */
proto.exocore.index.EntityResults.prototype.getNextPage = function() {
  return /** @type{?proto.exocore.index.Paging} */ (
    jspb.Message.getWrapperField(this, proto.exocore.index.Paging, 5));
};


/**
 * @param {?proto.exocore.index.Paging|undefined} value
 * @return {!proto.exocore.index.EntityResults} returns this
*/
proto.exocore.index.EntityResults.prototype.setNextPage = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.exocore.index.EntityResults} returns this
 */
proto.exocore.index.EntityResults.prototype.clearNextPage = function() {
  return this.setNextPage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.exocore.index.EntityResults.prototype.hasNextPage = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint64 hash = 6;
 * @return {number}
 */
proto.exocore.index.EntityResults.prototype.getHash = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.exocore.index.EntityResults} returns this
 */
proto.exocore.index.EntityResults.prototype.setHash = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.exocore.index.EntityResult.prototype.toObject = function(opt_includeInstance) {
  return proto.exocore.index.EntityResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.exocore.index.EntityResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.exocore.index.EntityResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    entity: (f = msg.getEntity()) && exocore_index_entity_pb.Entity.toObject(includeInstance, f),
    source: jspb.Message.getFieldWithDefault(msg, 2, 0),
    sortToken: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.exocore.index.EntityResult}
 */
proto.exocore.index.EntityResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.exocore.index.EntityResult;
  return proto.exocore.index.EntityResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.exocore.index.EntityResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.exocore.index.EntityResult}
 */
proto.exocore.index.EntityResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new exocore_index_entity_pb.Entity;
      reader.readMessage(value,exocore_index_entity_pb.Entity.deserializeBinaryFromReader);
      msg.setEntity(value);
      break;
    case 2:
      var value = /** @type {!proto.exocore.index.EntityResultSource} */ (reader.readEnum());
      msg.setSource(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSortToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.exocore.index.EntityResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.exocore.index.EntityResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.exocore.index.EntityResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.exocore.index.EntityResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEntity();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      exocore_index_entity_pb.Entity.serializeBinaryToWriter
    );
  }
  f = message.getSource();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getSortToken();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional Entity entity = 1;
 * @return {?proto.exocore.index.Entity}
 */
proto.exocore.index.EntityResult.prototype.getEntity = function() {
  return /** @type{?proto.exocore.index.Entity} */ (
    jspb.Message.getWrapperField(this, exocore_index_entity_pb.Entity, 1));
};


/**
 * @param {?proto.exocore.index.Entity|undefined} value
 * @return {!proto.exocore.index.EntityResult} returns this
*/
proto.exocore.index.EntityResult.prototype.setEntity = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.exocore.index.EntityResult} returns this
 */
proto.exocore.index.EntityResult.prototype.clearEntity = function() {
  return this.setEntity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.exocore.index.EntityResult.prototype.hasEntity = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional EntityResultSource source = 2;
 * @return {!proto.exocore.index.EntityResultSource}
 */
proto.exocore.index.EntityResult.prototype.getSource = function() {
  return /** @type {!proto.exocore.index.EntityResultSource} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.exocore.index.EntityResultSource} value
 * @return {!proto.exocore.index.EntityResult} returns this
 */
proto.exocore.index.EntityResult.prototype.setSource = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string sort_token = 3;
 * @return {string}
 */
proto.exocore.index.EntityResult.prototype.getSortToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.exocore.index.EntityResult} returns this
 */
proto.exocore.index.EntityResult.prototype.setSortToken = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * @enum {number}
 */
proto.exocore.index.EntityResultSource = {
  UNKNOWN: 0,
  PENDING: 1,
  CHAIN: 2
};

goog.object.extend(exports, proto.exocore.index);
