// automatically generated by the FlatBuffers compiler, do not modify


#![allow(dead_code)]
#![allow(unused_imports)]
extern crate flatbuffers;

pub mod chain {
  #![allow(dead_code)]
  #![allow(unused_imports)]

  use std::mem;
  use std::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::EndianScalar;

pub enum SegmentHeaderOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct SegmentHeader<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for SegmentHeader<'a> {
    type Inner = SegmentHeader<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> SegmentHeader<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        SegmentHeader {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args SegmentHeaderArgs) -> flatbuffers::WIPOffset<SegmentHeader<'bldr>> {
      let mut builder = SegmentHeaderBuilder::new(_fbb);
      builder.add_offset(args.offset);
      builder.finish()
    }

    pub const VT_OFFSET: flatbuffers::VOffsetT = 4;

  #[inline]
  pub fn offset(&self) -> u64 {
    self._tab.get::<u64>(SegmentHeader::VT_OFFSET, Some(0)).unwrap()
  }
}

pub struct SegmentHeaderArgs {
    pub offset: u64,
}
impl<'a> Default for SegmentHeaderArgs {
    #[inline]
    fn default() -> Self {
        SegmentHeaderArgs {
            offset: 0,
        }
    }
}
pub struct SegmentHeaderBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> SegmentHeaderBuilder<'a, 'b> {
  #[inline]
  pub fn add_offset(&mut self, offset: u64) {
    self.fbb_.push_slot::<u64>(SegmentHeader::VT_OFFSET, offset, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> SegmentHeaderBuilder<'a, 'b> {
    let start = _fbb.start_table();
    SegmentHeaderBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<SegmentHeader<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

pub enum BlockOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct Block<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Block<'a> {
    type Inner = Block<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> Block<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        Block {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args BlockArgs<'args>) -> flatbuffers::WIPOffset<Block<'bldr>> {
      let mut builder = BlockBuilder::new(_fbb);
      builder.add_size_(args.size_);
      builder.add_offset(args.offset);
      if let Some(x) = args.entries { builder.add_entries(x); }
      builder.finish()
    }

    pub const VT_OFFSET: flatbuffers::VOffsetT = 4;
    pub const VT_SIZE_: flatbuffers::VOffsetT = 6;
    pub const VT_ENTRIES: flatbuffers::VOffsetT = 8;

  #[inline]
  pub fn offset(&self) -> u64 {
    self._tab.get::<u64>(Block::VT_OFFSET, Some(0)).unwrap()
  }
  #[inline]
  pub fn size_(&self) -> u64 {
    self._tab.get::<u64>(Block::VT_SIZE_, Some(0)).unwrap()
  }
  #[inline]
  pub fn entries(&self) -> Option<flatbuffers::Vector<flatbuffers::ForwardsUOffset<BlockEntry<'a>>>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<flatbuffers::ForwardsUOffset<BlockEntry<'a>>>>>(Block::VT_ENTRIES, None)
  }
}

pub struct BlockArgs<'a> {
    pub offset: u64,
    pub size_: u64,
    pub entries: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a , flatbuffers::ForwardsUOffset<BlockEntry<'a >>>>>,
}
impl<'a> Default for BlockArgs<'a> {
    #[inline]
    fn default() -> Self {
        BlockArgs {
            offset: 0,
            size_: 0,
            entries: None,
        }
    }
}
pub struct BlockBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> BlockBuilder<'a, 'b> {
  #[inline]
  pub fn add_offset(&mut self, offset: u64) {
    self.fbb_.push_slot::<u64>(Block::VT_OFFSET, offset, 0);
  }
  #[inline]
  pub fn add_size_(&mut self, size_: u64) {
    self.fbb_.push_slot::<u64>(Block::VT_SIZE_, size_, 0);
  }
  #[inline]
  pub fn add_entries(&mut self, entries: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<BlockEntry<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Block::VT_ENTRIES, entries);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> BlockBuilder<'a, 'b> {
    let start = _fbb.start_table();
    BlockBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Block<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

pub enum BlockEntryOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct BlockEntry<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for BlockEntry<'a> {
    type Inner = BlockEntry<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> BlockEntry<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        BlockEntry {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args BlockEntryArgs<'args>) -> flatbuffers::WIPOffset<BlockEntry<'bldr>> {
      let mut builder = BlockEntryBuilder::new(_fbb);
      builder.add_offset(args.offset);
      if let Some(x) = args.data { builder.add_data(x); }
      builder.finish()
    }

    pub const VT_OFFSET: flatbuffers::VOffsetT = 4;
    pub const VT_DATA: flatbuffers::VOffsetT = 6;

  #[inline]
  pub fn offset(&self) -> u64 {
    self._tab.get::<u64>(BlockEntry::VT_OFFSET, Some(0)).unwrap()
  }
  #[inline]
  pub fn data(&self) -> Option<&'a [i8]> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i8>>>(BlockEntry::VT_DATA, None).map(|v| v.safe_slice())
  }
}

pub struct BlockEntryArgs<'a> {
    pub offset: u64,
    pub data: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a ,  i8>>>,
}
impl<'a> Default for BlockEntryArgs<'a> {
    #[inline]
    fn default() -> Self {
        BlockEntryArgs {
            offset: 0,
            data: None,
        }
    }
}
pub struct BlockEntryBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> BlockEntryBuilder<'a, 'b> {
  #[inline]
  pub fn add_offset(&mut self, offset: u64) {
    self.fbb_.push_slot::<u64>(BlockEntry::VT_OFFSET, offset, 0);
  }
  #[inline]
  pub fn add_data(&mut self, data: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BlockEntry::VT_DATA, data);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> BlockEntryBuilder<'a, 'b> {
    let start = _fbb.start_table();
    BlockEntryBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<BlockEntry<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

#[inline]
pub fn get_root_as_block_entry<'a>(buf: &'a [u8]) -> BlockEntry<'a> {
  flatbuffers::get_root::<BlockEntry<'a>>(buf)
}

#[inline]
pub fn get_size_prefixed_root_as_block_entry<'a>(buf: &'a [u8]) -> BlockEntry<'a> {
  flatbuffers::get_size_prefixed_root::<BlockEntry<'a>>(buf)
}

#[inline]
pub fn finish_block_entry_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<BlockEntry<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_block_entry_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<BlockEntry<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod Chain

