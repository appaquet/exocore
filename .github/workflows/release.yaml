on:
  push:
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
    branches:    
      - 'gha-release'

name: Release
jobs:
  exo_linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: ["armv7-unknown-linux-gnueabihf", "x86_64-unknown-linux-gnu"]
    steps:
      - uses: actions/checkout@v2.3.4

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: -p exo --target ${{ matrix.target }}

      - name: Create binary
        run: |
          mkdir archive
          cp target/${{ matrix.target }}/debug/exo archive
          cd archive/
          tar -czf $GITHUB_WORKSPACE/exo.${{ matrix.target }}.tar.gz *

      - name: Upload artifact
        uses: actions/upload-artifact@v2.2.0
        with:
          name: ${{ matrix.target }}-artifact
          path: exo.${{ matrix.target }}.tar.gz

  exo_macos:
    runs-on: macOS-latest
    strategy:
      matrix:
        target: ["x86_64-apple-darwin"]
    steps:
      - uses: actions/checkout@v2.3.4

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal

      - uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: -p exo --target ${{ matrix.target }}

      - name: Create binary
        run: |
          mkdir archive
          cp target/${{ matrix.target }}/debug/exo archive
          cd archive/
          tar -czf $GITHUB_WORKSPACE/exo.${{ matrix.target }}.tar.gz *

      - name: Upload artifact
        uses: actions/upload-artifact@v2.2.0
        with:
          name: ${{ matrix.target }}-artifact
          path: exo.${{ matrix.target }}.tar.gz

  exo_windows:
    runs-on: windows-latest
    strategy:
      matrix:
        target: ["x86_64-pc-windows-msvc"]
    steps:
      - uses: actions/checkout@v2.3.4

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal

      - uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: -p exo --target ${{ matrix.target }}

      - name: Create binary
        run: |
          mkdir archive
          cp target/${{ matrix.target }}/debug/exo archive
          cd archive/
          tar -czf $GITHUB_WORKSPACE/exo.${{ matrix.target }}.tar.gz *

      - name: Upload artifact
        uses: actions/upload-artifact@v2.2.0
        with:
          name: ${{ matrix.target }}-artifact
          path: exo.${{ matrix.target }}.tar.gz

  web_client:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2.3.4

      - name: Install build dependencies
        run: |
          sudo apt update
          sudo apt install -yq libssl-dev openssl protobuf-compiler

          curl -L https://github.com/rustwasm/wasm-pack/releases/download/v0.9.1/wasm-pack-v0.9.1-x86_64-unknown-linux-musl.tar.gz | tar zxf -
          mv wasm-pack*/wasm-pack .
          echo `pwd` >> $GITHUB_PATH

          sudo npm install -g yarn

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          target: wasm32-unknown-unknown

      - name: Build client
        run: |
          yarn build_dev # TODO: Switch back
          yarn pack
          mv exocore-v*.tgz exocore-web.tar.gz

      - name: Upload build artifacts
        uses: actions/upload-artifact@v2.2.0
        with:
          name: client-web-artifact
          path: exocore-web.tar.gz

  ios_client:
    runs-on: macOS-latest # See https://github.com/actions/virtual-environments/blob/main/images/macos for versions
    steps:
      - uses: actions/checkout@v2.3.4

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal

      - name: Install cargo-lipo
        run: |
          brew install swift-protobuf
          rustup target add aarch64-apple-ios x86_64-apple-ios # actions-rs don't support multiple targets: https://github.com/actions-rs/toolchain/issues/16
          cargo install cargo-lipo

      - name: Build client & pod
        run: |
          cd $GITHUB_WORKSPACE/clients/ios
          ./tools/generate.sh
          ./tools/build.sh debug                # TODO: Switch back

          cd $GITHUB_WORKSPACE
          mkdir archive
          mkdir -p archive/clients/
          cp -r clients/ios archive/clients/
          cp Exocore.podspec archive/
          cd archive/
          tar -czf $GITHUB_WORKSPACE/exocore-ios.tar.gz *

      - name: Upload build artifacts
        uses: actions/upload-artifact@v2.2.0
        with:
          name: client-ios-artifact
          path: exocore-ios.tar.gz

  commit_artifacts:
    runs-on: ubuntu-latest
    needs: [exo_linux, exo_macos, exo_windows, web_client, ios_client]
    steps:
      - uses: actions/checkout@v2.3.4

      - name: Download all artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts

      - name: List artifacts
        run: |
          ls -R artifacts/**/*

  # build:
  #   name: Upload Release Asset
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2
  #     - name: Build project # This would actually build your project, using zip for an example artifact
  #       run: |
  #         zip --junk-paths my-artifact README.md
  #     - name: Create Release
  #       id: create_release
  #       uses: actions/create-release@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         tag_name: ${{ github.ref }}
  #         release_name: Release ${{ github.ref }}
  #         draft: false
  #         prerelease: false
  #     - name: Upload Release Asset
  #       id: upload-release-asset 
  #       uses: actions/upload-release-asset@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
  #         asset_path: ./my-artifact.zip
  #         asset_name: my-artifact.zip
  #         asset_content_type: application/zip