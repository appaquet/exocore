// This file is generated by rust-protobuf 2.8.1. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `dynamic.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_1;

#[derive(PartialEq,Clone,Default)]
pub struct DynamicMessage {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DynamicMessage {
    fn default() -> &'a DynamicMessage {
        <DynamicMessage as ::protobuf::Message>::default_instance()
    }
}

impl DynamicMessage {
    pub fn new() -> DynamicMessage {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for DynamicMessage {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DynamicMessage {
        DynamicMessage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<DynamicMessage>(
                    "DynamicMessage",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DynamicMessage {
        static mut instance: ::protobuf::lazy::Lazy<DynamicMessage> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const DynamicMessage,
        };
        unsafe {
            instance.get(DynamicMessage::new)
        }
    }
}

impl ::protobuf::Clear for DynamicMessage {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DynamicMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DynamicMessage {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TestDynamicMessage {
    // message fields
    pub string_field: ::std::string::String,
    pub string_value_field: ::protobuf::SingularPtrField<::protobuf::well_known_types::StringValue>,
    pub struct_field: ::protobuf::SingularPtrField<TestStruct>,
    pub string_field2: ::std::string::String,
    // message oneof groups
    pub fields: ::std::option::Option<TestDynamicMessage_oneof_fields>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TestDynamicMessage {
    fn default() -> &'a TestDynamicMessage {
        <TestDynamicMessage as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum TestDynamicMessage_oneof_fields {
    oneof_string(::std::string::String),
}

impl TestDynamicMessage {
    pub fn new() -> TestDynamicMessage {
        ::std::default::Default::default()
    }

    // string string_field = 1;


    pub fn get_string_field(&self) -> &str {
        &self.string_field
    }
    pub fn clear_string_field(&mut self) {
        self.string_field.clear();
    }

    // Param is passed by value, moved
    pub fn set_string_field(&mut self, v: ::std::string::String) {
        self.string_field = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_string_field(&mut self) -> &mut ::std::string::String {
        &mut self.string_field
    }

    // Take field
    pub fn take_string_field(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.string_field, ::std::string::String::new())
    }

    // .google.protobuf.StringValue string_value_field = 2;


    pub fn get_string_value_field(&self) -> &::protobuf::well_known_types::StringValue {
        self.string_value_field.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::StringValue::default_instance())
    }
    pub fn clear_string_value_field(&mut self) {
        self.string_value_field.clear();
    }

    pub fn has_string_value_field(&self) -> bool {
        self.string_value_field.is_some()
    }

    // Param is passed by value, moved
    pub fn set_string_value_field(&mut self, v: ::protobuf::well_known_types::StringValue) {
        self.string_value_field = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_string_value_field(&mut self) -> &mut ::protobuf::well_known_types::StringValue {
        if self.string_value_field.is_none() {
            self.string_value_field.set_default();
        }
        self.string_value_field.as_mut().unwrap()
    }

    // Take field
    pub fn take_string_value_field(&mut self) -> ::protobuf::well_known_types::StringValue {
        self.string_value_field.take().unwrap_or_else(|| ::protobuf::well_known_types::StringValue::new())
    }

    // .exocore.test.TestStruct struct_field = 3;


    pub fn get_struct_field(&self) -> &TestStruct {
        self.struct_field.as_ref().unwrap_or_else(|| TestStruct::default_instance())
    }
    pub fn clear_struct_field(&mut self) {
        self.struct_field.clear();
    }

    pub fn has_struct_field(&self) -> bool {
        self.struct_field.is_some()
    }

    // Param is passed by value, moved
    pub fn set_struct_field(&mut self, v: TestStruct) {
        self.struct_field = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_struct_field(&mut self) -> &mut TestStruct {
        if self.struct_field.is_none() {
            self.struct_field.set_default();
        }
        self.struct_field.as_mut().unwrap()
    }

    // Take field
    pub fn take_struct_field(&mut self) -> TestStruct {
        self.struct_field.take().unwrap_or_else(|| TestStruct::new())
    }

    // string oneof_string = 4;


    pub fn get_oneof_string(&self) -> &str {
        match self.fields {
            ::std::option::Option::Some(TestDynamicMessage_oneof_fields::oneof_string(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_oneof_string(&mut self) {
        self.fields = ::std::option::Option::None;
    }

    pub fn has_oneof_string(&self) -> bool {
        match self.fields {
            ::std::option::Option::Some(TestDynamicMessage_oneof_fields::oneof_string(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_oneof_string(&mut self, v: ::std::string::String) {
        self.fields = ::std::option::Option::Some(TestDynamicMessage_oneof_fields::oneof_string(v))
    }

    // Mutable pointer to the field.
    pub fn mut_oneof_string(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(TestDynamicMessage_oneof_fields::oneof_string(_)) = self.fields {
        } else {
            self.fields = ::std::option::Option::Some(TestDynamicMessage_oneof_fields::oneof_string(::std::string::String::new()));
        }
        match self.fields {
            ::std::option::Option::Some(TestDynamicMessage_oneof_fields::oneof_string(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_oneof_string(&mut self) -> ::std::string::String {
        if self.has_oneof_string() {
            match self.fields.take() {
                ::std::option::Option::Some(TestDynamicMessage_oneof_fields::oneof_string(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // string string_field2 = 5;


    pub fn get_string_field2(&self) -> &str {
        &self.string_field2
    }
    pub fn clear_string_field2(&mut self) {
        self.string_field2.clear();
    }

    // Param is passed by value, moved
    pub fn set_string_field2(&mut self, v: ::std::string::String) {
        self.string_field2 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_string_field2(&mut self) -> &mut ::std::string::String {
        &mut self.string_field2
    }

    // Take field
    pub fn take_string_field2(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.string_field2, ::std::string::String::new())
    }
}

impl ::protobuf::Message for TestDynamicMessage {
    fn is_initialized(&self) -> bool {
        for v in &self.string_value_field {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.struct_field {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.string_field)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.string_value_field)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.struct_field)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.fields = ::std::option::Option::Some(TestDynamicMessage_oneof_fields::oneof_string(is.read_string()?));
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.string_field2)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.string_field.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.string_field);
        }
        if let Some(ref v) = self.string_value_field.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.struct_field.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.string_field2.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.string_field2);
        }
        if let ::std::option::Option::Some(ref v) = self.fields {
            match v {
                &TestDynamicMessage_oneof_fields::oneof_string(ref v) => {
                    my_size += ::protobuf::rt::string_size(4, &v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.string_field.is_empty() {
            os.write_string(1, &self.string_field)?;
        }
        if let Some(ref v) = self.string_value_field.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.struct_field.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.string_field2.is_empty() {
            os.write_string(5, &self.string_field2)?;
        }
        if let ::std::option::Option::Some(ref v) = self.fields {
            match v {
                &TestDynamicMessage_oneof_fields::oneof_string(ref v) => {
                    os.write_string(4, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TestDynamicMessage {
        TestDynamicMessage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "string_field",
                    |m: &TestDynamicMessage| { &m.string_field },
                    |m: &mut TestDynamicMessage| { &mut m.string_field },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::StringValue>>(
                    "string_value_field",
                    |m: &TestDynamicMessage| { &m.string_value_field },
                    |m: &mut TestDynamicMessage| { &mut m.string_value_field },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TestStruct>>(
                    "struct_field",
                    |m: &TestDynamicMessage| { &m.struct_field },
                    |m: &mut TestDynamicMessage| { &mut m.struct_field },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                    "oneof_string",
                    TestDynamicMessage::has_oneof_string,
                    TestDynamicMessage::get_oneof_string,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "string_field2",
                    |m: &TestDynamicMessage| { &m.string_field2 },
                    |m: &mut TestDynamicMessage| { &mut m.string_field2 },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TestDynamicMessage>(
                    "TestDynamicMessage",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TestDynamicMessage {
        static mut instance: ::protobuf::lazy::Lazy<TestDynamicMessage> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TestDynamicMessage,
        };
        unsafe {
            instance.get(TestDynamicMessage::new)
        }
    }
}

impl ::protobuf::Clear for TestDynamicMessage {
    fn clear(&mut self) {
        self.string_field.clear();
        self.string_value_field.clear();
        self.struct_field.clear();
        self.fields = ::std::option::Option::None;
        self.string_field2.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TestDynamicMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TestDynamicMessage {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TestStruct {
    // message fields
    pub field: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TestStruct {
    fn default() -> &'a TestStruct {
        <TestStruct as ::protobuf::Message>::default_instance()
    }
}

impl TestStruct {
    pub fn new() -> TestStruct {
        ::std::default::Default::default()
    }

    // string field = 1;


    pub fn get_field(&self) -> &str {
        &self.field
    }
    pub fn clear_field(&mut self) {
        self.field.clear();
    }

    // Param is passed by value, moved
    pub fn set_field(&mut self, v: ::std::string::String) {
        self.field = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_field(&mut self) -> &mut ::std::string::String {
        &mut self.field
    }

    // Take field
    pub fn take_field(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.field, ::std::string::String::new())
    }
}

impl ::protobuf::Message for TestStruct {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.field)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.field.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.field);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.field.is_empty() {
            os.write_string(1, &self.field)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TestStruct {
        TestStruct::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "field",
                    |m: &TestStruct| { &m.field },
                    |m: &mut TestStruct| { &mut m.field },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TestStruct>(
                    "TestStruct",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TestStruct {
        static mut instance: ::protobuf::lazy::Lazy<TestStruct> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TestStruct,
        };
        unsafe {
            instance.get(TestStruct::new)
        }
    }
}

impl ::protobuf::Clear for TestStruct {
    fn clear(&mut self) {
        self.field.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TestStruct {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TestStruct {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

pub static file_descriptor_proto_data: &'static [u8] = b"\
    \n\rdynamic.proto\x12\x0cexocore.test\x1a\x15exocore/options.proto\x1a\
    \x1egoogle/protobuf/wrappers.proto\"\x10\n\x0eDynamicMessage\"\x99\x02\n\
    \x12TestDynamicMessage\x12&\n\x0cstring_field\x18\x01\x20\x01(\tR\x0bstr\
    ingFieldB\x03\xc0>\x01\x12J\n\x12string_value_field\x18\x02\x20\x01(\x0b\
    2\x1c.google.protobuf.StringValueR\x10stringValueField\x12;\n\x0cstruct_\
    field\x18\x03\x20\x01(\x0b2\x18.exocore.test.TestStructR\x0bstructField\
    \x12#\n\x0coneof_string\x18\x04\x20\x01(\tH\0R\x0boneofString\x12#\n\rst\
    ring_field2\x18\x05\x20\x01(\tR\x0cstringField2B\x08\n\x06fields\"\"\n\n\
    TestStruct\x12\x14\n\x05field\x18\x01\x20\x01(\tR\x05fieldb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
