// This file is generated by rust-protobuf 2.8.1. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `exocore/index/query.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_1;

#[derive(PartialEq,Clone,Default)]
pub struct EntityQuery {
    // message fields
    pub paging: ::protobuf::SingularPtrField<Paging>,
    pub summary: bool,
    pub watch_token: ::std::string::String,
    pub result_hash: ::std::string::String,
    // message oneof groups
    pub predicate: ::std::option::Option<EntityQuery_oneof_predicate>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EntityQuery {
    fn default() -> &'a EntityQuery {
        <EntityQuery as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum EntityQuery_oneof_predicate {
    field_match(MatchPredicate),
    field_trait(TraitPredicate),
    id(IdPredicate),
    fail(FailPredicate),
}

impl EntityQuery {
    pub fn new() -> EntityQuery {
        ::std::default::Default::default()
    }

    // .exocore.index.MatchPredicate match = 1;


    pub fn get_field_match(&self) -> &MatchPredicate {
        match self.predicate {
            ::std::option::Option::Some(EntityQuery_oneof_predicate::field_match(ref v)) => v,
            _ => MatchPredicate::default_instance(),
        }
    }
    pub fn clear_field_match(&mut self) {
        self.predicate = ::std::option::Option::None;
    }

    pub fn has_field_match(&self) -> bool {
        match self.predicate {
            ::std::option::Option::Some(EntityQuery_oneof_predicate::field_match(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_field_match(&mut self, v: MatchPredicate) {
        self.predicate = ::std::option::Option::Some(EntityQuery_oneof_predicate::field_match(v))
    }

    // Mutable pointer to the field.
    pub fn mut_field_match(&mut self) -> &mut MatchPredicate {
        if let ::std::option::Option::Some(EntityQuery_oneof_predicate::field_match(_)) = self.predicate {
        } else {
            self.predicate = ::std::option::Option::Some(EntityQuery_oneof_predicate::field_match(MatchPredicate::new()));
        }
        match self.predicate {
            ::std::option::Option::Some(EntityQuery_oneof_predicate::field_match(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_field_match(&mut self) -> MatchPredicate {
        if self.has_field_match() {
            match self.predicate.take() {
                ::std::option::Option::Some(EntityQuery_oneof_predicate::field_match(v)) => v,
                _ => panic!(),
            }
        } else {
            MatchPredicate::new()
        }
    }

    // .exocore.index.TraitPredicate trait = 2;


    pub fn get_field_trait(&self) -> &TraitPredicate {
        match self.predicate {
            ::std::option::Option::Some(EntityQuery_oneof_predicate::field_trait(ref v)) => v,
            _ => TraitPredicate::default_instance(),
        }
    }
    pub fn clear_field_trait(&mut self) {
        self.predicate = ::std::option::Option::None;
    }

    pub fn has_field_trait(&self) -> bool {
        match self.predicate {
            ::std::option::Option::Some(EntityQuery_oneof_predicate::field_trait(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_field_trait(&mut self, v: TraitPredicate) {
        self.predicate = ::std::option::Option::Some(EntityQuery_oneof_predicate::field_trait(v))
    }

    // Mutable pointer to the field.
    pub fn mut_field_trait(&mut self) -> &mut TraitPredicate {
        if let ::std::option::Option::Some(EntityQuery_oneof_predicate::field_trait(_)) = self.predicate {
        } else {
            self.predicate = ::std::option::Option::Some(EntityQuery_oneof_predicate::field_trait(TraitPredicate::new()));
        }
        match self.predicate {
            ::std::option::Option::Some(EntityQuery_oneof_predicate::field_trait(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_field_trait(&mut self) -> TraitPredicate {
        if self.has_field_trait() {
            match self.predicate.take() {
                ::std::option::Option::Some(EntityQuery_oneof_predicate::field_trait(v)) => v,
                _ => panic!(),
            }
        } else {
            TraitPredicate::new()
        }
    }

    // .exocore.index.IdPredicate id = 3;


    pub fn get_id(&self) -> &IdPredicate {
        match self.predicate {
            ::std::option::Option::Some(EntityQuery_oneof_predicate::id(ref v)) => v,
            _ => IdPredicate::default_instance(),
        }
    }
    pub fn clear_id(&mut self) {
        self.predicate = ::std::option::Option::None;
    }

    pub fn has_id(&self) -> bool {
        match self.predicate {
            ::std::option::Option::Some(EntityQuery_oneof_predicate::id(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: IdPredicate) {
        self.predicate = ::std::option::Option::Some(EntityQuery_oneof_predicate::id(v))
    }

    // Mutable pointer to the field.
    pub fn mut_id(&mut self) -> &mut IdPredicate {
        if let ::std::option::Option::Some(EntityQuery_oneof_predicate::id(_)) = self.predicate {
        } else {
            self.predicate = ::std::option::Option::Some(EntityQuery_oneof_predicate::id(IdPredicate::new()));
        }
        match self.predicate {
            ::std::option::Option::Some(EntityQuery_oneof_predicate::id(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_id(&mut self) -> IdPredicate {
        if self.has_id() {
            match self.predicate.take() {
                ::std::option::Option::Some(EntityQuery_oneof_predicate::id(v)) => v,
                _ => panic!(),
            }
        } else {
            IdPredicate::new()
        }
    }

    // .exocore.index.FailPredicate fail = 4;


    pub fn get_fail(&self) -> &FailPredicate {
        match self.predicate {
            ::std::option::Option::Some(EntityQuery_oneof_predicate::fail(ref v)) => v,
            _ => FailPredicate::default_instance(),
        }
    }
    pub fn clear_fail(&mut self) {
        self.predicate = ::std::option::Option::None;
    }

    pub fn has_fail(&self) -> bool {
        match self.predicate {
            ::std::option::Option::Some(EntityQuery_oneof_predicate::fail(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_fail(&mut self, v: FailPredicate) {
        self.predicate = ::std::option::Option::Some(EntityQuery_oneof_predicate::fail(v))
    }

    // Mutable pointer to the field.
    pub fn mut_fail(&mut self) -> &mut FailPredicate {
        if let ::std::option::Option::Some(EntityQuery_oneof_predicate::fail(_)) = self.predicate {
        } else {
            self.predicate = ::std::option::Option::Some(EntityQuery_oneof_predicate::fail(FailPredicate::new()));
        }
        match self.predicate {
            ::std::option::Option::Some(EntityQuery_oneof_predicate::fail(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_fail(&mut self) -> FailPredicate {
        if self.has_fail() {
            match self.predicate.take() {
                ::std::option::Option::Some(EntityQuery_oneof_predicate::fail(v)) => v,
                _ => panic!(),
            }
        } else {
            FailPredicate::new()
        }
    }

    // .exocore.index.Paging paging = 5;


    pub fn get_paging(&self) -> &Paging {
        self.paging.as_ref().unwrap_or_else(|| Paging::default_instance())
    }
    pub fn clear_paging(&mut self) {
        self.paging.clear();
    }

    pub fn has_paging(&self) -> bool {
        self.paging.is_some()
    }

    // Param is passed by value, moved
    pub fn set_paging(&mut self, v: Paging) {
        self.paging = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_paging(&mut self) -> &mut Paging {
        if self.paging.is_none() {
            self.paging.set_default();
        }
        self.paging.as_mut().unwrap()
    }

    // Take field
    pub fn take_paging(&mut self) -> Paging {
        self.paging.take().unwrap_or_else(|| Paging::new())
    }

    // bool summary = 6;


    pub fn get_summary(&self) -> bool {
        self.summary
    }
    pub fn clear_summary(&mut self) {
        self.summary = false;
    }

    // Param is passed by value, moved
    pub fn set_summary(&mut self, v: bool) {
        self.summary = v;
    }

    // string watch_token = 7;


    pub fn get_watch_token(&self) -> &str {
        &self.watch_token
    }
    pub fn clear_watch_token(&mut self) {
        self.watch_token.clear();
    }

    // Param is passed by value, moved
    pub fn set_watch_token(&mut self, v: ::std::string::String) {
        self.watch_token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_watch_token(&mut self) -> &mut ::std::string::String {
        &mut self.watch_token
    }

    // Take field
    pub fn take_watch_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.watch_token, ::std::string::String::new())
    }

    // string result_hash = 8;


    pub fn get_result_hash(&self) -> &str {
        &self.result_hash
    }
    pub fn clear_result_hash(&mut self) {
        self.result_hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_result_hash(&mut self, v: ::std::string::String) {
        self.result_hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_result_hash(&mut self) -> &mut ::std::string::String {
        &mut self.result_hash
    }

    // Take field
    pub fn take_result_hash(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.result_hash, ::std::string::String::new())
    }
}

impl ::protobuf::Message for EntityQuery {
    fn is_initialized(&self) -> bool {
        if let Some(EntityQuery_oneof_predicate::field_match(ref v)) = self.predicate {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(EntityQuery_oneof_predicate::field_trait(ref v)) = self.predicate {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(EntityQuery_oneof_predicate::id(ref v)) = self.predicate {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(EntityQuery_oneof_predicate::fail(ref v)) = self.predicate {
            if !v.is_initialized() {
                return false;
            }
        }
        for v in &self.paging {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.predicate = ::std::option::Option::Some(EntityQuery_oneof_predicate::field_match(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.predicate = ::std::option::Option::Some(EntityQuery_oneof_predicate::field_trait(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.predicate = ::std::option::Option::Some(EntityQuery_oneof_predicate::id(is.read_message()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.predicate = ::std::option::Option::Some(EntityQuery_oneof_predicate::fail(is.read_message()?));
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.paging)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.summary = tmp;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.watch_token)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.result_hash)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.paging.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.summary != false {
            my_size += 2;
        }
        if !self.watch_token.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.watch_token);
        }
        if !self.result_hash.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.result_hash);
        }
        if let ::std::option::Option::Some(ref v) = self.predicate {
            match v {
                &EntityQuery_oneof_predicate::field_match(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &EntityQuery_oneof_predicate::field_trait(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &EntityQuery_oneof_predicate::id(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &EntityQuery_oneof_predicate::fail(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.paging.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.summary != false {
            os.write_bool(6, self.summary)?;
        }
        if !self.watch_token.is_empty() {
            os.write_string(7, &self.watch_token)?;
        }
        if !self.result_hash.is_empty() {
            os.write_string(8, &self.result_hash)?;
        }
        if let ::std::option::Option::Some(ref v) = self.predicate {
            match v {
                &EntityQuery_oneof_predicate::field_match(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &EntityQuery_oneof_predicate::field_trait(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &EntityQuery_oneof_predicate::id(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &EntityQuery_oneof_predicate::fail(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EntityQuery {
        EntityQuery::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, MatchPredicate>(
                    "match",
                    EntityQuery::has_field_match,
                    EntityQuery::get_field_match,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, TraitPredicate>(
                    "trait",
                    EntityQuery::has_field_trait,
                    EntityQuery::get_field_trait,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, IdPredicate>(
                    "id",
                    EntityQuery::has_id,
                    EntityQuery::get_id,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, FailPredicate>(
                    "fail",
                    EntityQuery::has_fail,
                    EntityQuery::get_fail,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Paging>>(
                    "paging",
                    |m: &EntityQuery| { &m.paging },
                    |m: &mut EntityQuery| { &mut m.paging },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "summary",
                    |m: &EntityQuery| { &m.summary },
                    |m: &mut EntityQuery| { &mut m.summary },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "watch_token",
                    |m: &EntityQuery| { &m.watch_token },
                    |m: &mut EntityQuery| { &mut m.watch_token },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "result_hash",
                    |m: &EntityQuery| { &m.result_hash },
                    |m: &mut EntityQuery| { &mut m.result_hash },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<EntityQuery>(
                    "EntityQuery",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static EntityQuery {
        static mut instance: ::protobuf::lazy::Lazy<EntityQuery> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const EntityQuery,
        };
        unsafe {
            instance.get(EntityQuery::new)
        }
    }
}

impl ::protobuf::Clear for EntityQuery {
    fn clear(&mut self) {
        self.predicate = ::std::option::Option::None;
        self.predicate = ::std::option::Option::None;
        self.predicate = ::std::option::Option::None;
        self.predicate = ::std::option::Option::None;
        self.paging.clear();
        self.summary = false;
        self.watch_token.clear();
        self.result_hash.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EntityQuery {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EntityQuery {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MatchPredicate {
    // message fields
    pub query: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MatchPredicate {
    fn default() -> &'a MatchPredicate {
        <MatchPredicate as ::protobuf::Message>::default_instance()
    }
}

impl MatchPredicate {
    pub fn new() -> MatchPredicate {
        ::std::default::Default::default()
    }

    // string query = 1;


    pub fn get_query(&self) -> &str {
        &self.query
    }
    pub fn clear_query(&mut self) {
        self.query.clear();
    }

    // Param is passed by value, moved
    pub fn set_query(&mut self, v: ::std::string::String) {
        self.query = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_query(&mut self) -> &mut ::std::string::String {
        &mut self.query
    }

    // Take field
    pub fn take_query(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.query, ::std::string::String::new())
    }
}

impl ::protobuf::Message for MatchPredicate {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.query)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.query.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.query);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.query.is_empty() {
            os.write_string(1, &self.query)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MatchPredicate {
        MatchPredicate::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "query",
                    |m: &MatchPredicate| { &m.query },
                    |m: &mut MatchPredicate| { &mut m.query },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<MatchPredicate>(
                    "MatchPredicate",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static MatchPredicate {
        static mut instance: ::protobuf::lazy::Lazy<MatchPredicate> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const MatchPredicate,
        };
        unsafe {
            instance.get(MatchPredicate::new)
        }
    }
}

impl ::protobuf::Clear for MatchPredicate {
    fn clear(&mut self) {
        self.query.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MatchPredicate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MatchPredicate {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct IdPredicate {
    // message fields
    pub id: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a IdPredicate {
    fn default() -> &'a IdPredicate {
        <IdPredicate as ::protobuf::Message>::default_instance()
    }
}

impl IdPredicate {
    pub fn new() -> IdPredicate {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }
}

impl ::protobuf::Message for IdPredicate {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> IdPredicate {
        IdPredicate::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "id",
                    |m: &IdPredicate| { &m.id },
                    |m: &mut IdPredicate| { &mut m.id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<IdPredicate>(
                    "IdPredicate",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static IdPredicate {
        static mut instance: ::protobuf::lazy::Lazy<IdPredicate> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const IdPredicate,
        };
        unsafe {
            instance.get(IdPredicate::new)
        }
    }
}

impl ::protobuf::Clear for IdPredicate {
    fn clear(&mut self) {
        self.id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for IdPredicate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for IdPredicate {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct FailPredicate {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FailPredicate {
    fn default() -> &'a FailPredicate {
        <FailPredicate as ::protobuf::Message>::default_instance()
    }
}

impl FailPredicate {
    pub fn new() -> FailPredicate {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for FailPredicate {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FailPredicate {
        FailPredicate::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<FailPredicate>(
                    "FailPredicate",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static FailPredicate {
        static mut instance: ::protobuf::lazy::Lazy<FailPredicate> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const FailPredicate,
        };
        unsafe {
            instance.get(FailPredicate::new)
        }
    }
}

impl ::protobuf::Clear for FailPredicate {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FailPredicate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FailPredicate {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TraitPredicate {
    // message fields
    pub trait_name: ::std::string::String,
    pub query: ::protobuf::SingularPtrField<TraitQuery>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TraitPredicate {
    fn default() -> &'a TraitPredicate {
        <TraitPredicate as ::protobuf::Message>::default_instance()
    }
}

impl TraitPredicate {
    pub fn new() -> TraitPredicate {
        ::std::default::Default::default()
    }

    // string trait_name = 1;


    pub fn get_trait_name(&self) -> &str {
        &self.trait_name
    }
    pub fn clear_trait_name(&mut self) {
        self.trait_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_trait_name(&mut self, v: ::std::string::String) {
        self.trait_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_trait_name(&mut self) -> &mut ::std::string::String {
        &mut self.trait_name
    }

    // Take field
    pub fn take_trait_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.trait_name, ::std::string::String::new())
    }

    // .exocore.index.TraitQuery query = 2;


    pub fn get_query(&self) -> &TraitQuery {
        self.query.as_ref().unwrap_or_else(|| TraitQuery::default_instance())
    }
    pub fn clear_query(&mut self) {
        self.query.clear();
    }

    pub fn has_query(&self) -> bool {
        self.query.is_some()
    }

    // Param is passed by value, moved
    pub fn set_query(&mut self, v: TraitQuery) {
        self.query = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_query(&mut self) -> &mut TraitQuery {
        if self.query.is_none() {
            self.query.set_default();
        }
        self.query.as_mut().unwrap()
    }

    // Take field
    pub fn take_query(&mut self) -> TraitQuery {
        self.query.take().unwrap_or_else(|| TraitQuery::new())
    }
}

impl ::protobuf::Message for TraitPredicate {
    fn is_initialized(&self) -> bool {
        for v in &self.query {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.trait_name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.query)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.trait_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.trait_name);
        }
        if let Some(ref v) = self.query.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.trait_name.is_empty() {
            os.write_string(1, &self.trait_name)?;
        }
        if let Some(ref v) = self.query.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TraitPredicate {
        TraitPredicate::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "trait_name",
                    |m: &TraitPredicate| { &m.trait_name },
                    |m: &mut TraitPredicate| { &mut m.trait_name },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TraitQuery>>(
                    "query",
                    |m: &TraitPredicate| { &m.query },
                    |m: &mut TraitPredicate| { &mut m.query },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TraitPredicate>(
                    "TraitPredicate",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TraitPredicate {
        static mut instance: ::protobuf::lazy::Lazy<TraitPredicate> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TraitPredicate,
        };
        unsafe {
            instance.get(TraitPredicate::new)
        }
    }
}

impl ::protobuf::Clear for TraitPredicate {
    fn clear(&mut self) {
        self.trait_name.clear();
        self.query.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TraitPredicate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TraitPredicate {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TraitQuery {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TraitQuery {
    fn default() -> &'a TraitQuery {
        <TraitQuery as ::protobuf::Message>::default_instance()
    }
}

impl TraitQuery {
    pub fn new() -> TraitQuery {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for TraitQuery {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TraitQuery {
        TraitQuery::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<TraitQuery>(
                    "TraitQuery",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TraitQuery {
        static mut instance: ::protobuf::lazy::Lazy<TraitQuery> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TraitQuery,
        };
        unsafe {
            instance.get(TraitQuery::new)
        }
    }
}

impl ::protobuf::Clear for TraitQuery {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TraitQuery {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TraitQuery {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Paging {
    // message fields
    pub after_token: ::std::string::String,
    pub before_token: ::std::string::String,
    pub count: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Paging {
    fn default() -> &'a Paging {
        <Paging as ::protobuf::Message>::default_instance()
    }
}

impl Paging {
    pub fn new() -> Paging {
        ::std::default::Default::default()
    }

    // string after_token = 1;


    pub fn get_after_token(&self) -> &str {
        &self.after_token
    }
    pub fn clear_after_token(&mut self) {
        self.after_token.clear();
    }

    // Param is passed by value, moved
    pub fn set_after_token(&mut self, v: ::std::string::String) {
        self.after_token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_after_token(&mut self) -> &mut ::std::string::String {
        &mut self.after_token
    }

    // Take field
    pub fn take_after_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.after_token, ::std::string::String::new())
    }

    // string before_token = 2;


    pub fn get_before_token(&self) -> &str {
        &self.before_token
    }
    pub fn clear_before_token(&mut self) {
        self.before_token.clear();
    }

    // Param is passed by value, moved
    pub fn set_before_token(&mut self, v: ::std::string::String) {
        self.before_token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_before_token(&mut self) -> &mut ::std::string::String {
        &mut self.before_token
    }

    // Take field
    pub fn take_before_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.before_token, ::std::string::String::new())
    }

    // uint32 count = 3;


    pub fn get_count(&self) -> u32 {
        self.count
    }
    pub fn clear_count(&mut self) {
        self.count = 0;
    }

    // Param is passed by value, moved
    pub fn set_count(&mut self, v: u32) {
        self.count = v;
    }
}

impl ::protobuf::Message for Paging {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.after_token)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.before_token)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.count = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.after_token.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.after_token);
        }
        if !self.before_token.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.before_token);
        }
        if self.count != 0 {
            my_size += ::protobuf::rt::value_size(3, self.count, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.after_token.is_empty() {
            os.write_string(1, &self.after_token)?;
        }
        if !self.before_token.is_empty() {
            os.write_string(2, &self.before_token)?;
        }
        if self.count != 0 {
            os.write_uint32(3, self.count)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Paging {
        Paging::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "after_token",
                    |m: &Paging| { &m.after_token },
                    |m: &mut Paging| { &mut m.after_token },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "before_token",
                    |m: &Paging| { &m.before_token },
                    |m: &mut Paging| { &mut m.before_token },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "count",
                    |m: &Paging| { &m.count },
                    |m: &mut Paging| { &mut m.count },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Paging>(
                    "Paging",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Paging {
        static mut instance: ::protobuf::lazy::Lazy<Paging> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Paging,
        };
        unsafe {
            instance.get(Paging::new)
        }
    }
}

impl ::protobuf::Clear for Paging {
    fn clear(&mut self) {
        self.after_token.clear();
        self.before_token.clear();
        self.count = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Paging {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Paging {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x19exocore/index/query.proto\x12\rexocore.index\"\xf5\x02\n\x0bEntity\
    Query\x125\n\x05match\x18\x01\x20\x01(\x0b2\x1d.exocore.index.MatchPredi\
    cateH\0R\x05match\x125\n\x05trait\x18\x02\x20\x01(\x0b2\x1d.exocore.inde\
    x.TraitPredicateH\0R\x05trait\x12,\n\x02id\x18\x03\x20\x01(\x0b2\x1a.exo\
    core.index.IdPredicateH\0R\x02id\x122\n\x04fail\x18\x04\x20\x01(\x0b2\
    \x1c.exocore.index.FailPredicateH\0R\x04fail\x12-\n\x06paging\x18\x05\
    \x20\x01(\x0b2\x15.exocore.index.PagingR\x06paging\x12\x18\n\x07summary\
    \x18\x06\x20\x01(\x08R\x07summary\x12\x1f\n\x0bwatch_token\x18\x07\x20\
    \x01(\tR\nwatchToken\x12\x1f\n\x0bresult_hash\x18\x08\x20\x01(\tR\nresul\
    tHashB\x0b\n\tpredicate\"&\n\x0eMatchPredicate\x12\x14\n\x05query\x18\
    \x01\x20\x01(\tR\x05query\"\x1d\n\x0bIdPredicate\x12\x0e\n\x02id\x18\x01\
    \x20\x01(\tR\x02id\"\x0f\n\rFailPredicate\"`\n\x0eTraitPredicate\x12\x1d\
    \n\ntrait_name\x18\x01\x20\x01(\tR\ttraitName\x12/\n\x05query\x18\x02\
    \x20\x01(\x0b2\x19.exocore.index.TraitQueryR\x05query\"\x0c\n\nTraitQuer\
    y\"b\n\x06Paging\x12\x1f\n\x0bafter_token\x18\x01\x20\x01(\tR\nafterToke\
    n\x12!\n\x0cbefore_token\x18\x02\x20\x01(\tR\x0bbeforeToken\x12\x14\n\
    \x05count\x18\x03\x20\x01(\rR\x05countb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
