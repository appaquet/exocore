// This file is generated by rust-protobuf 2.8.1. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `exocore/index/results.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_1;

#[derive(PartialEq,Clone,Default)]
pub struct EntityResults {
    // message fields
    pub entities: ::protobuf::RepeatedField<EntityResults>,
    pub summary: bool,
    pub estimated_count: u32,
    pub current_page: ::protobuf::SingularPtrField<super::query::Paging>,
    pub next_page: ::protobuf::SingularPtrField<super::query::Paging>,
    pub hash: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EntityResults {
    fn default() -> &'a EntityResults {
        <EntityResults as ::protobuf::Message>::default_instance()
    }
}

impl EntityResults {
    pub fn new() -> EntityResults {
        ::std::default::Default::default()
    }

    // repeated .exocore.index.EntityResults entities = 1;


    pub fn get_entities(&self) -> &[EntityResults] {
        &self.entities
    }
    pub fn clear_entities(&mut self) {
        self.entities.clear();
    }

    // Param is passed by value, moved
    pub fn set_entities(&mut self, v: ::protobuf::RepeatedField<EntityResults>) {
        self.entities = v;
    }

    // Mutable pointer to the field.
    pub fn mut_entities(&mut self) -> &mut ::protobuf::RepeatedField<EntityResults> {
        &mut self.entities
    }

    // Take field
    pub fn take_entities(&mut self) -> ::protobuf::RepeatedField<EntityResults> {
        ::std::mem::replace(&mut self.entities, ::protobuf::RepeatedField::new())
    }

    // bool summary = 2;


    pub fn get_summary(&self) -> bool {
        self.summary
    }
    pub fn clear_summary(&mut self) {
        self.summary = false;
    }

    // Param is passed by value, moved
    pub fn set_summary(&mut self, v: bool) {
        self.summary = v;
    }

    // uint32 estimated_count = 3;


    pub fn get_estimated_count(&self) -> u32 {
        self.estimated_count
    }
    pub fn clear_estimated_count(&mut self) {
        self.estimated_count = 0;
    }

    // Param is passed by value, moved
    pub fn set_estimated_count(&mut self, v: u32) {
        self.estimated_count = v;
    }

    // .exocore.index.Paging current_page = 4;


    pub fn get_current_page(&self) -> &super::query::Paging {
        self.current_page.as_ref().unwrap_or_else(|| super::query::Paging::default_instance())
    }
    pub fn clear_current_page(&mut self) {
        self.current_page.clear();
    }

    pub fn has_current_page(&self) -> bool {
        self.current_page.is_some()
    }

    // Param is passed by value, moved
    pub fn set_current_page(&mut self, v: super::query::Paging) {
        self.current_page = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_current_page(&mut self) -> &mut super::query::Paging {
        if self.current_page.is_none() {
            self.current_page.set_default();
        }
        self.current_page.as_mut().unwrap()
    }

    // Take field
    pub fn take_current_page(&mut self) -> super::query::Paging {
        self.current_page.take().unwrap_or_else(|| super::query::Paging::new())
    }

    // .exocore.index.Paging next_page = 5;


    pub fn get_next_page(&self) -> &super::query::Paging {
        self.next_page.as_ref().unwrap_or_else(|| super::query::Paging::default_instance())
    }
    pub fn clear_next_page(&mut self) {
        self.next_page.clear();
    }

    pub fn has_next_page(&self) -> bool {
        self.next_page.is_some()
    }

    // Param is passed by value, moved
    pub fn set_next_page(&mut self, v: super::query::Paging) {
        self.next_page = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_next_page(&mut self) -> &mut super::query::Paging {
        if self.next_page.is_none() {
            self.next_page.set_default();
        }
        self.next_page.as_mut().unwrap()
    }

    // Take field
    pub fn take_next_page(&mut self) -> super::query::Paging {
        self.next_page.take().unwrap_or_else(|| super::query::Paging::new())
    }

    // string hash = 6;


    pub fn get_hash(&self) -> &str {
        &self.hash
    }
    pub fn clear_hash(&mut self) {
        self.hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_hash(&mut self, v: ::std::string::String) {
        self.hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_hash(&mut self) -> &mut ::std::string::String {
        &mut self.hash
    }

    // Take field
    pub fn take_hash(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.hash, ::std::string::String::new())
    }
}

impl ::protobuf::Message for EntityResults {
    fn is_initialized(&self) -> bool {
        for v in &self.entities {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.current_page {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.next_page {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.entities)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.summary = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.estimated_count = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.current_page)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.next_page)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.hash)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.entities {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.summary != false {
            my_size += 2;
        }
        if self.estimated_count != 0 {
            my_size += ::protobuf::rt::value_size(3, self.estimated_count, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.current_page.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.next_page.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.hash.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.hash);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.entities {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.summary != false {
            os.write_bool(2, self.summary)?;
        }
        if self.estimated_count != 0 {
            os.write_uint32(3, self.estimated_count)?;
        }
        if let Some(ref v) = self.current_page.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.next_page.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.hash.is_empty() {
            os.write_string(6, &self.hash)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EntityResults {
        EntityResults::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<EntityResults>>(
                    "entities",
                    |m: &EntityResults| { &m.entities },
                    |m: &mut EntityResults| { &mut m.entities },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "summary",
                    |m: &EntityResults| { &m.summary },
                    |m: &mut EntityResults| { &mut m.summary },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "estimated_count",
                    |m: &EntityResults| { &m.estimated_count },
                    |m: &mut EntityResults| { &mut m.estimated_count },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::query::Paging>>(
                    "current_page",
                    |m: &EntityResults| { &m.current_page },
                    |m: &mut EntityResults| { &mut m.current_page },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::query::Paging>>(
                    "next_page",
                    |m: &EntityResults| { &m.next_page },
                    |m: &mut EntityResults| { &mut m.next_page },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "hash",
                    |m: &EntityResults| { &m.hash },
                    |m: &mut EntityResults| { &mut m.hash },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<EntityResults>(
                    "EntityResults",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static EntityResults {
        static mut instance: ::protobuf::lazy::Lazy<EntityResults> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const EntityResults,
        };
        unsafe {
            instance.get(EntityResults::new)
        }
    }
}

impl ::protobuf::Clear for EntityResults {
    fn clear(&mut self) {
        self.entities.clear();
        self.summary = false;
        self.estimated_count = 0;
        self.current_page.clear();
        self.next_page.clear();
        self.hash.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EntityResults {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EntityResults {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EntityResult {
    // message fields
    pub entity: ::protobuf::SingularPtrField<super::entity::Entity>,
    pub source: EntityResultSource,
    pub sort_token: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EntityResult {
    fn default() -> &'a EntityResult {
        <EntityResult as ::protobuf::Message>::default_instance()
    }
}

impl EntityResult {
    pub fn new() -> EntityResult {
        ::std::default::Default::default()
    }

    // .exocore.index.Entity entity = 1;


    pub fn get_entity(&self) -> &super::entity::Entity {
        self.entity.as_ref().unwrap_or_else(|| super::entity::Entity::default_instance())
    }
    pub fn clear_entity(&mut self) {
        self.entity.clear();
    }

    pub fn has_entity(&self) -> bool {
        self.entity.is_some()
    }

    // Param is passed by value, moved
    pub fn set_entity(&mut self, v: super::entity::Entity) {
        self.entity = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_entity(&mut self) -> &mut super::entity::Entity {
        if self.entity.is_none() {
            self.entity.set_default();
        }
        self.entity.as_mut().unwrap()
    }

    // Take field
    pub fn take_entity(&mut self) -> super::entity::Entity {
        self.entity.take().unwrap_or_else(|| super::entity::Entity::new())
    }

    // .exocore.index.EntityResultSource source = 2;


    pub fn get_source(&self) -> EntityResultSource {
        self.source
    }
    pub fn clear_source(&mut self) {
        self.source = EntityResultSource::UNKNOWN;
    }

    // Param is passed by value, moved
    pub fn set_source(&mut self, v: EntityResultSource) {
        self.source = v;
    }

    // string sort_token = 3;


    pub fn get_sort_token(&self) -> &str {
        &self.sort_token
    }
    pub fn clear_sort_token(&mut self) {
        self.sort_token.clear();
    }

    // Param is passed by value, moved
    pub fn set_sort_token(&mut self, v: ::std::string::String) {
        self.sort_token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sort_token(&mut self) -> &mut ::std::string::String {
        &mut self.sort_token
    }

    // Take field
    pub fn take_sort_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.sort_token, ::std::string::String::new())
    }
}

impl ::protobuf::Message for EntityResult {
    fn is_initialized(&self) -> bool {
        for v in &self.entity {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.entity)?;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.source, 2, &mut self.unknown_fields)?
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.sort_token)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.entity.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.source != EntityResultSource::UNKNOWN {
            my_size += ::protobuf::rt::enum_size(2, self.source);
        }
        if !self.sort_token.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.sort_token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.entity.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.source != EntityResultSource::UNKNOWN {
            os.write_enum(2, self.source.value())?;
        }
        if !self.sort_token.is_empty() {
            os.write_string(3, &self.sort_token)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EntityResult {
        EntityResult::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::entity::Entity>>(
                    "entity",
                    |m: &EntityResult| { &m.entity },
                    |m: &mut EntityResult| { &mut m.entity },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<EntityResultSource>>(
                    "source",
                    |m: &EntityResult| { &m.source },
                    |m: &mut EntityResult| { &mut m.source },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "sort_token",
                    |m: &EntityResult| { &m.sort_token },
                    |m: &mut EntityResult| { &mut m.sort_token },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<EntityResult>(
                    "EntityResult",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static EntityResult {
        static mut instance: ::protobuf::lazy::Lazy<EntityResult> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const EntityResult,
        };
        unsafe {
            instance.get(EntityResult::new)
        }
    }
}

impl ::protobuf::Clear for EntityResult {
    fn clear(&mut self) {
        self.entity.clear();
        self.source = EntityResultSource::UNKNOWN;
        self.sort_token.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EntityResult {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EntityResult {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum EntityResultSource {
    UNKNOWN = 0,
    PENDING = 1,
    CHAIN = 2,
}

impl ::protobuf::ProtobufEnum for EntityResultSource {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EntityResultSource> {
        match value {
            0 => ::std::option::Option::Some(EntityResultSource::UNKNOWN),
            1 => ::std::option::Option::Some(EntityResultSource::PENDING),
            2 => ::std::option::Option::Some(EntityResultSource::CHAIN),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [EntityResultSource] = &[
            EntityResultSource::UNKNOWN,
            EntityResultSource::PENDING,
            EntityResultSource::CHAIN,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("EntityResultSource", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for EntityResultSource {
}

impl ::std::default::Default for EntityResultSource {
    fn default() -> Self {
        EntityResultSource::UNKNOWN
    }
}

impl ::protobuf::reflect::ProtobufValue for EntityResultSource {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1bexocore/index/results.proto\x12\rexocore.index\x1a\x1aexocore/inde\
    x/entity.proto\x1a\x19exocore/index/query.proto\"\x8e\x02\n\rEntityResul\
    ts\x128\n\x08entities\x18\x01\x20\x03(\x0b2\x1c.exocore.index.EntityResu\
    ltsR\x08entities\x12\x18\n\x07summary\x18\x02\x20\x01(\x08R\x07summary\
    \x12'\n\x0festimated_count\x18\x03\x20\x01(\rR\x0eestimatedCount\x128\n\
    \x0ccurrent_page\x18\x04\x20\x01(\x0b2\x15.exocore.index.PagingR\x0bcurr\
    entPage\x122\n\tnext_page\x18\x05\x20\x01(\x0b2\x15.exocore.index.Paging\
    R\x08nextPage\x12\x12\n\x04hash\x18\x06\x20\x01(\tR\x04hash\"\x97\x01\n\
    \x0cEntityResult\x12-\n\x06entity\x18\x01\x20\x01(\x0b2\x15.exocore.inde\
    x.EntityR\x06entity\x129\n\x06source\x18\x02\x20\x01(\x0e2!.exocore.inde\
    x.EntityResultSourceR\x06source\x12\x1d\n\nsort_token\x18\x03\x20\x01(\t\
    R\tsortToken*9\n\x12EntityResultSource\x12\x0b\n\x07UNKNOWN\x10\0\x12\
    \x0b\n\x07PENDING\x10\x01\x12\t\n\x05CHAIN\x10\x02b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
